(()=>{"use strict";class t{constructor(){this._accumulator=0,this._indexRegisterX=0,this._indexRegisterY=0,this._stackPointer=0,this._statusRegister=0,this._programCounter=0}get accumulator(){return this._accumulator}set accumulator(t){if(-256&t)throw new Error("Accumulator overflow");this._accumulator=t}get indexRegisterX(){return this._indexRegisterX}set indexRegisterX(t){if(-256&t)throw new Error("IndexRegisterX overflow");this._indexRegisterX=t}get indexRegisterY(){return this._indexRegisterY}set indexRegisterY(t){if(-256&t)throw new Error("IndexRegisterY overflow");this._indexRegisterY=t}get stackPointer(){return this._stackPointer}set stackPointer(t){if(-256&t)throw new Error("StackPointer overflow");this._stackPointer=t}get programCounter(){return this._programCounter}set programCounter(t){if(-65536&t)throw new Error("ProgramCounter overflow");this._programCounter=t}get statusRegisterBits(){return{N:Boolean(this._statusRegister>>7&1),V:Boolean(this._statusRegister>>6&1),R:Boolean(this._statusRegister>>5&1),B:Boolean(this._statusRegister>>4&1),D:Boolean(this._statusRegister>>3&1),I:Boolean(this._statusRegister>>2&1),Z:Boolean(this._statusRegister>>1&1),C:Boolean(1&this._statusRegister)}}set statusRegisterBits(t){let e=0;e|=Number(t.N)<<7,e|=Number(t.V)<<6,e|=Number(t.R)<<5,e|=Number(t.B)<<4,e|=Number(t.D)<<3,e|=Number(t.I)<<2,e|=Number(t.Z)<<1,e|=0|Number(t.C),this._statusRegister=e}}class e{constructor(e){this._nes=e,this._register=new t,this.initRegister()}initRegister(){this._register.accumulator=0,this._register.indexRegisterX=0,this._register.indexRegisterY=0,this._register.stackPointer=253,this._register.programCounter=this.readMemory(65532)|this.readMemory(65533)<<8,this._register.statusRegisterBits={N:!1,V:!1,R:!1,B:!1,D:!1,I:!0,Z:!1,C:!1},console.log("programCounter:",this._register.programCounter.toString(16)),console.log("Register initialized")}start(){this.initRegister(),console.log("CPU started")}readMemory(t){if(t<2048)return this._nes.readWRAM(t);if(t<8192);else if(t<8200);else if(t<16384);else if(t<16416);else if(t<24576);else if(!(t<32768)){if(t<65536)return this._nes.readPRGROM(t-32768);throw new Error("Memory is out of range")}return 0}}class r{constructor(){this._ram=new Array(2048)}read(t){if(t<0)throw new Error("Memory is out of range");if(2047<t)throw new Error("Memory is out of range");return 255&this._ram[t]}write(t,e){if(t<0)throw new Error("Memory is out of range");if(2047<t)throw new Error("Memory is out of range");this._ram[t]=255&e}}class o{constructor(t=void 0){this._chrrom=new Uint8Array,this._prgrom=new Uint8Array,t&&this.load(t)}load(t,e=void 0){let r=t.slice(0,16);console.log("ROM size:",t.length),console.log("ROM header:",r);let o=r[5],s=16+16384*r[4],i=s+8192*o;if(this._prgrom=t.slice(16,s),console.dir("PRG-ROM",this._prgrom),this._chrrom=t.slice(s,i),e){let t=this._chrrom.length;console.log("CHR-ROM size:",t);let r=e.getContext("2d");if(!r)throw new Error("Could not get 2D context");r.fillStyle="black",r.fillRect(0,0,512,256);for(let e=0;e<Math.floor(t/16);e++){let t=new Array(8);for(let e=0;e<16;e++){t[e]=new Array(8);for(let r=0;r<8;r++)t[e][r]=0}for(let r=0;r<8;r++){let o=this._chrrom[16*e+r],s=this._chrrom[16*e+r+8];for(let e=0;e<8;e++)t[r][e]+=o>>7-e&1,t[r][e]+=s>>7-e&1}for(let o=0;o<8;o++)for(let s=0;s<8;s++)r.fillStyle="rgb("+64*t[o][s]+","+64*t[o][s]+","+64*t[o][s]+")",r.fillRect(e%64*8+s,o+8*Math.floor(e/64),1,1)}}}readPrgrom(t){return this._prgrom[t]}readChrrom(t){return this._chrrom[t]}}const s=new class{constructor(){this._masterClock=23625e4/11,this._cpuClock=this._masterClock/12,this._ppuClock=this._masterClock/4,this._wram=new r,this._vram=new r,this._rom=new o,this._cpu=new e(this)}insertROM(t,e=void 0){this._rom.load(t,e)}readWRAM(t){return this._wram.read(t)}readPRGROM(t){return this._rom.readPrgrom(t)}start(){console.log("NES started"),this._cpu.start()}};window.onload=()=>{const t=document.getElementById("rom-file"),e=document.getElementById("chrrom-canvas");t.addEventListener("change",(t=>{return r=void 0,o=void 0,n=function*(){var r;const o=null===(r=t.target.files)||void 0===r?void 0:r[0];if(o)try{const t=yield o.arrayBuffer(),r=new Uint8Array(t);s.insertROM(r,e)}catch(t){console.error("Error loading ROM:",t)}},new((i=void 0)||(i=Promise))((function(t,e){function s(t){try{l(n.next(t))}catch(t){e(t)}}function a(t){try{l(n.throw(t))}catch(t){e(t)}}function l(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(s,a)}l((n=n.apply(r,o||[])).next())}));var r,o,i,n})),document.getElementById("start-button").addEventListener("click",(()=>{s.start()})),function(){console.log("Hello, NES Emulator!");try{const t=document.getElementById("screen").getContext("2d");if(!t)throw new Error("Could not get 2D context");t.fillStyle="black",t.fillRect(0,0,256,240)}catch(t){alert("Error: "+t.stack)}}()}})();